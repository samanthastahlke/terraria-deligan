Used Coarse + noted epochs

"Z-Mean"
- Output of MoG sampling was z only (no added sigma)

"xNoise"
- Noise was generated via theano_rng.normal() and multiplied by a set factor
- Output of MoG used reparameterization trick (z + noise * sigma)

for i in [1, 10, 20, 50, 100, 200]:

    noise = i * theano_rng.normal(size=noise_dim)
    print("Setting up sampling...")
    print(noise.eval())
    gen_layers[0].input_var = noise
    gen_dat = ll.get_output(gen_layers[-1], deterministic=False)
    samplefun = th.function(inputs=[], outputs=gen_dat)

    print("Generating samples...")
    sample_x = samplefun()
    img_bhwc = np.transpose(sample_x[:100, ], (0, 2, 3, 1))
    img_tile = plotting.img_tile(img_bhwc, aspect_ratio=1.0, border_color=1.0, stretch=True)
    img = plotting.plot_img(img_tile, title='Terraria samples')
    plotting.plt.savefig(load_results_dir + '/dg_terraria_sample_minibatch_' + str(i) + 'xnoise_' + fepoch + '.png')
    print("Saved samples to ", load_results_dir)
    
"Sigma Rows"
- First row used the same z (first element of the row) with -50, -20, -10, -5, 0, 0, 5, 10, 20, 50 sigma added across the row
- Extreme version used -200, -100, -50, -20, 0, 0, 20, 50, 100, 200
- Subtle version used -10, -5, -2, -1, 0, 0, 1, 2, 5, 10

z_val = self.z.get_value(borrow=False)
sig_val = self.sig.get_value(borrow=False)

sig_list_mul = [-50, -20, -10, -5, 0, 0, 5, 10, 20, 50]
sig_val_base = np.copy(sig_val[0])

for i in range(10):
    z_val[i] = np.copy(z_val[0])
    sig_val[i] = np.copy(sig_list_mul[i] * sig_val_base)

#self.sample_z.set_value(np.vstack([z_val[mog_index] for i in range(100)]).astype(np.float32))
#self.sample_sig.set_value(np.vstack([sig_val[mog_index] for i in range(100)]).astype(np.float32))
self.sample_z.set_value(z_val.astype(np.float32))
self.sample_sig.set_value(sig_val.astype(np.float32))
return self.sample_z + self.sample_sig

"Sigma Rows All"
- Repeated with the standard intervals above
- Leads to some "fuzzification"

z_val = self.z.get_value(borrow=False)
sig_val = self.sig.get_value(borrow=False)

sig_list_mul = [-50, -20, -10, -5, 0, 0, 5, 10, 20, 50]
sig_val_base = []

for i in range(10):
    sig_val_base.append(np.copy(sig_val[i * 10]))

for i in range(100):
    z_val[i] = np.copy(z_val[i // 10 * 10])
    sig_val[i] = np.copy(sig_list_mul[i % 10] * sig_val_base[i // 10])

self.sample_z.set_value(z_val.astype(np.float32))
self.sample_sig.set_value(sig_val.astype(np.float32))
return self.sample_z + self.sample_sig

Overall Loop
for fepoch in param_flist:

    f = np.load(args.load_dir + load_disc_param + fepoch + '.npz')
    param_values = [f['arr_%d' % i] for i in range(len(f.files))]
    for i, p in enumerate(disc_params):
        p.set_value(param_values[i])
    print("Loaded discriminator parameters.")

    f = np.load(args.load_dir + load_gen_param + fepoch + '.npz')
    param_values = [f['arr_%d' % i] for i in range(len(f.files))]
    #For experimentation - loading another model variant for recombination.
    #fprime = np.load(args.load_dir + 'gen_params800.npz')
    #param_values_prime = [fprime['arr_%d' % i] for i in range(len(fprime.files))]
    for i, p in enumerate(gen_params):
        p.set_value(param_values[i])
    print("Loaded generator parameters.")

    noise = theano_rng.normal(size=noise_dim)
    sample_input = th.tensor.zeros(noise_dim)

    print("Setting up sampling...")
    gen_layers[0].input_var = sample_input
    gen_dat = ll.get_output(gen_layers[-1], deterministic=False)
    samplefun = th.function(inputs=[], outputs=gen_dat)

    print("Generating samples...")
    sample_x = samplefun()
    img_bhwc = np.transpose(sample_x[:100, ], (0, 2, 3, 1))
    img_tile = plotting.img_tile(img_bhwc, aspect_ratio=1.0, border_color=1.0, stretch=True)
    img = plotting.plot_img(img_tile, title='Terraria samples')
    plotting.plt.savefig(load_results_dir + '/dg_terraria_sample_minibatch_sigma_rows_subtle_' + fepoch + '.png')
    print("Saved samples to ", load_results_dir)